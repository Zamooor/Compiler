
state 0:

	program : . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 13
	program	goto 156
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 1:

	exp : letblock .  (reduce by rule 13)



	.	reduce by rule 13


state 2:

	exp : forblock .  (reduce by rule 12)



	.	reduce by rule 12


state 3:

	exp : whileblock .  (reduce by rule 11)



	.	reduce by rule 11


state 4:

	exp : ifblock .  (reduce by rule 10)



	.	reduce by rule 10


state 5:

	exp : arrayinst .  (reduce by rule 8)



	.	reduce by rule 8


state 6:

	exp : recinst .  (reduce by rule 7)



	.	reduce by rule 7


state 7:

	exp : assign .  (reduce by rule 4)



	.	reduce by rule 4


state 8:

	exp : boolop .  (reduce by rule 18)



	.	reduce by rule 18


state 9:

	exp : comp .  (reduce by rule 17)



	.	reduce by rule 17


state 10:

	exp : arith .  (reduce by rule 16)



	.	reduce by rule 16


state 11:

	exp : funcall .  (reduce by rule 15)



	.	reduce by rule 15


state 12:

	exp : lvalue .  (reduce by rule 1)
	lvalue : lvalue . DOT ID 
	lvalue : lvalue . LBRACK exp RBRACK 
	assign : lvalue . ASSIGN exp 

	LBRACK	shift 27
	DOT	shift 26
	ASSIGN	shift 25


	.	reduce by rule 1


state 13:

	program : exp .  (reduce by rule 0)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 0


state 14:

	exp : NIL .  (reduce by rule 2)



	.	reduce by rule 2


state 15:

	exp : BREAK .  (reduce by rule 14)



	.	reduce by rule 14


state 16:

	letblock : LET . decs IN expseq END 

	FUNCTION	shift 47
	VAR	shift 46
	TYPE	shift 45

	decs	goto 44
	dec	goto 43
	tydec	goto 42
	vardec	goto 41
	fundec	goto 40

	.	error


state 17:

	forblock : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 48


	.	error


state 18:

	whileblock : WHILE . exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 49
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 19:

	ifblock : IF . exp THEN exp ELSE exp 
	ifblock : IF . exp THEN exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 50
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 20:

	arith : MINUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 51
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 21:

	exp : LPAREN . expseq RPAREN 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 54
	lvalue	goto 12
	expseq	goto 53
	exps	goto 52
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 22:

	exp : STRING .  (reduce by rule 6)



	.	reduce by rule 6


state 23:

	exp : INT .  (reduce by rule 5)



	.	reduce by rule 5


state 24:

	exp : ID .  (reduce by rule 3)
	lvalue : ID . DOT ID 
	lvalue : ID . LBRACK exp RBRACK 
	funcall : ID . expList 
	recinst : ID . LBRACE RBRACE 
	recinst : ID . LBRACE aggregateSeq RBRACE 
	arrayinst : ID . LBRACK exp RBRACK OF exp 

	LPAREN	shift 59
	LBRACK	shift 58
	LBRACE	shift 57
	DOT	shift 56

	expList	goto 55

	.	reduce by rule 3


state 25:

	assign : lvalue ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 60
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 26:

	lvalue : lvalue DOT . ID 

	ID	shift 61


	.	error


state 27:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 62
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 28:

	boolop : exp OR . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 63
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 29:

	boolop : exp AND . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 64
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 30:

	comp : exp GE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 65
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 31:

	comp : exp GT . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 66
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 32:

	comp : exp LE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 67
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 33:

	comp : exp LT . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 68
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 34:

	comp : exp NEQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 69
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 35:

	comp : exp EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 70
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 36:

	arith : exp DIVIDE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 71
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 37:

	arith : exp TIMES . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 72
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 38:

	arith : exp MINUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 73
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 39:

	arith : exp PLUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 74
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 40:

	dec : fundec .  (reduce by rule 38)



	.	reduce by rule 38


state 41:

	dec : vardec .  (reduce by rule 37)



	.	reduce by rule 37


state 42:

	dec : tydec .  (reduce by rule 36)



	.	reduce by rule 36


state 43:

	decs : dec .  (reduce by rule 34)
	decs : dec . decs 

	FUNCTION	shift 47
	VAR	shift 46
	TYPE	shift 45

	decs	goto 75
	dec	goto 43
	tydec	goto 42
	vardec	goto 41
	fundec	goto 40

	.	reduce by rule 34


state 44:

	letblock : LET decs . IN expseq END 

	IN	shift 76


	.	error


state 45:

	tydec : TYPE . ID EQ ty 

	ID	shift 77


	.	error


state 46:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 78


	.	error


state 47:

	fundec : FUNCTION . ID LPAREN RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN RPAREN COLON ID EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 79


	.	error


state 48:

	forblock : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 80


	.	error


state 49:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	whileblock : WHILE exp . DO exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	DO	shift 81


	.	error


state 50:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	ifblock : IF exp . THEN exp ELSE exp 
	ifblock : IF exp . THEN exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	THEN	shift 82


	.	error


state 51:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	arith : MINUS exp .  (reduce by rule 57)
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 



	.	reduce by rule 57


state 52:

	expseq : exps .  (reduce by rule 66)



	.	reduce by rule 66


state 53:

	exp : LPAREN expseq . RPAREN 

	RPAREN	shift 83


	.	error


state 54:

	exps : exp .  (reduce by rule 67)
	exps : exp . SEMICOLON exps 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	SEMICOLON	shift 84
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 67


state 55:

	funcall : ID expList .  (reduce by rule 52)



	.	reduce by rule 52


state 56:

	lvalue : ID DOT . ID 

	ID	shift 85


	.	error


state 57:

	recinst : ID LBRACE . RBRACE 
	recinst : ID LBRACE . aggregateSeq RBRACE 

	ID	shift 88
	RBRACE	shift 87

	aggregateSeq	goto 86

	.	error


state 58:

	lvalue : ID LBRACK . exp RBRACK 
	arrayinst : ID LBRACK . exp RBRACK OF exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 89
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 59:

	expList : LPAREN . RPAREN 
	expList : LPAREN . expL RPAREN 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	RPAREN	shift 92
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 91
	lvalue	goto 12
	expL	goto 90
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 60:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	assign : lvalue ASSIGN exp .  (reduce by rule 23)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 23


state 61:

	lvalue : lvalue DOT ID .  (reduce by rule 20)



	.	reduce by rule 20


state 62:

	lvalue : lvalue LBRACK exp . RBRACK 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	RBRACK	shift 93
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	error


state 63:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	boolop : exp OR exp .  (reduce by rule 65)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29


	.	reduce by rule 65


state 64:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp AND exp .  (reduce by rule 64)
	boolop : exp . OR exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30


	.	reduce by rule 64


state 65:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp GE exp .  (reduce by rule 62)
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 62
	COMMA	reduce by rule 62
	SEMICOLON	reduce by rule 62
	RPAREN	reduce by rule 62
	RBRACK	reduce by rule 62
	RBRACE	reduce by rule 62
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 62
	OR	reduce by rule 62
	THEN	reduce by rule 62
	ELSE	reduce by rule 62
	TO	reduce by rule 62
	DO	reduce by rule 62
	IN	reduce by rule 62
	END	reduce by rule 62
	FUNCTION	reduce by rule 62
	VAR	reduce by rule 62
	TYPE	reduce by rule 62


	.	error


state 66:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp GT exp .  (reduce by rule 60)
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 60
	COMMA	reduce by rule 60
	SEMICOLON	reduce by rule 60
	RPAREN	reduce by rule 60
	RBRACK	reduce by rule 60
	RBRACE	reduce by rule 60
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 60
	OR	reduce by rule 60
	THEN	reduce by rule 60
	ELSE	reduce by rule 60
	TO	reduce by rule 60
	DO	reduce by rule 60
	IN	reduce by rule 60
	END	reduce by rule 60
	FUNCTION	reduce by rule 60
	VAR	reduce by rule 60
	TYPE	reduce by rule 60


	.	error


state 67:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	comp : exp LE exp .  (reduce by rule 63)
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 63
	COMMA	reduce by rule 63
	SEMICOLON	reduce by rule 63
	RPAREN	reduce by rule 63
	RBRACK	reduce by rule 63
	RBRACE	reduce by rule 63
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 63
	OR	reduce by rule 63
	THEN	reduce by rule 63
	ELSE	reduce by rule 63
	TO	reduce by rule 63
	DO	reduce by rule 63
	IN	reduce by rule 63
	END	reduce by rule 63
	FUNCTION	reduce by rule 63
	VAR	reduce by rule 63
	TYPE	reduce by rule 63


	.	error


state 68:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp LT exp .  (reduce by rule 61)
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 61
	COMMA	reduce by rule 61
	SEMICOLON	reduce by rule 61
	RPAREN	reduce by rule 61
	RBRACK	reduce by rule 61
	RBRACE	reduce by rule 61
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 61
	OR	reduce by rule 61
	THEN	reduce by rule 61
	ELSE	reduce by rule 61
	TO	reduce by rule 61
	DO	reduce by rule 61
	IN	reduce by rule 61
	END	reduce by rule 61
	FUNCTION	reduce by rule 61
	VAR	reduce by rule 61
	TYPE	reduce by rule 61


	.	error


state 69:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp NEQ exp .  (reduce by rule 59)
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 59
	COMMA	reduce by rule 59
	SEMICOLON	reduce by rule 59
	RPAREN	reduce by rule 59
	RBRACK	reduce by rule 59
	RBRACE	reduce by rule 59
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 59
	OR	reduce by rule 59
	THEN	reduce by rule 59
	ELSE	reduce by rule 59
	TO	reduce by rule 59
	DO	reduce by rule 59
	IN	reduce by rule 59
	END	reduce by rule 59
	FUNCTION	reduce by rule 59
	VAR	reduce by rule 59
	TYPE	reduce by rule 59


	.	error


state 70:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp EQ exp .  (reduce by rule 58)
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 58
	COMMA	reduce by rule 58
	SEMICOLON	reduce by rule 58
	RPAREN	reduce by rule 58
	RBRACK	reduce by rule 58
	RBRACE	reduce by rule 58
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 58
	OR	reduce by rule 58
	THEN	reduce by rule 58
	ELSE	reduce by rule 58
	TO	reduce by rule 58
	DO	reduce by rule 58
	IN	reduce by rule 58
	END	reduce by rule 58
	FUNCTION	reduce by rule 58
	VAR	reduce by rule 58
	TYPE	reduce by rule 58


	.	error


state 71:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	arith : exp DIVIDE exp .  (reduce by rule 56)
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 



	.	reduce by rule 56


state 72:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp TIMES exp .  (reduce by rule 55)
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 



	.	reduce by rule 55


state 73:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp MINUS exp .  (reduce by rule 54)
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	TIMES	shift 37
	DIVIDE	shift 36


	.	reduce by rule 54


state 74:

	arith : exp . PLUS exp 
	arith : exp PLUS exp .  (reduce by rule 53)
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	TIMES	shift 37
	DIVIDE	shift 36


	.	reduce by rule 53


state 75:

	decs : dec decs .  (reduce by rule 35)



	.	reduce by rule 35


state 76:

	letblock : LET decs IN . expseq END 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 54
	lvalue	goto 12
	expseq	goto 94
	exps	goto 52
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 77:

	tydec : TYPE ID . EQ ty 

	EQ	shift 95


	.	error


state 78:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 97
	ASSIGN	shift 96


	.	error


state 79:

	fundec : FUNCTION ID . LPAREN RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN RPAREN COLON ID EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 98


	.	error


state 80:

	forblock : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 99
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 81:

	whileblock : WHILE exp DO . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 100
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 82:

	ifblock : IF exp THEN . exp ELSE exp 
	ifblock : IF exp THEN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 101
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 83:

	exp : LPAREN expseq RPAREN .  (reduce by rule 9)



	.	reduce by rule 9


state 84:

	exps : exp SEMICOLON . exps 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 54
	lvalue	goto 12
	exps	goto 102
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 85:

	lvalue : ID DOT ID .  (reduce by rule 19)



	.	reduce by rule 19


state 86:

	recinst : ID LBRACE aggregateSeq . RBRACE 
	aggregateSeq : aggregateSeq . COMMA ID EQ exp 

	COMMA	shift 104
	RBRACE	shift 103


	.	error


state 87:

	recinst : ID LBRACE RBRACE .  (reduce by rule 24)



	.	reduce by rule 24


state 88:

	aggregateSeq : ID . EQ exp 

	EQ	shift 105


	.	error


state 89:

	lvalue : ID LBRACK exp . RBRACK 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	arrayinst : ID LBRACK exp . RBRACK OF exp 

	RBRACK	shift 106
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	error


state 90:

	expList : LPAREN expL . RPAREN 

	RPAREN	shift 107


	.	error


state 91:

	expL : exp .  (reduce by rule 71)
	expL : exp . COMMA expL 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	COMMA	shift 108
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 71


state 92:

	expList : LPAREN RPAREN .  (reduce by rule 69)



	.	reduce by rule 69


state 93:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 22)



	.	reduce by rule 22


state 94:

	letblock : LET decs IN expseq . END 

	END	shift 109


	.	error


state 95:

	tydec : TYPE ID EQ . ty 

	ID	shift 113
	LBRACE	shift 112
	ARRAY	shift 111

	ty	goto 110

	.	error


state 96:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 114
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 97:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 115


	.	error


state 98:

	fundec : FUNCTION ID LPAREN . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . RPAREN COLON ID EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 118
	RPAREN	shift 117

	tyfields	goto 116

	.	error


state 99:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	forblock : FOR ID ASSIGN exp . TO exp DO exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	TO	shift 119


	.	error


state 100:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	whileblock : WHILE exp DO exp .  (reduce by rule 31)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 31


state 101:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	ifblock : IF exp THEN exp . ELSE exp 
	ifblock : IF exp THEN exp .  (reduce by rule 30)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	ELSE	shift 120


	.	reduce by rule 30


state 102:

	exps : exp SEMICOLON exps .  (reduce by rule 68)



	.	reduce by rule 68


state 103:

	recinst : ID LBRACE aggregateSeq RBRACE .  (reduce by rule 25)



	.	reduce by rule 25


state 104:

	aggregateSeq : aggregateSeq COMMA . ID EQ exp 

	ID	shift 121


	.	error


state 105:

	aggregateSeq : ID EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 122
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 106:

	lvalue : ID LBRACK exp RBRACK .  (reduce by rule 21)
	arrayinst : ID LBRACK exp RBRACK . OF exp 

	OF	shift 123


	.	reduce by rule 21


state 107:

	expList : LPAREN expL RPAREN .  (reduce by rule 70)



	.	reduce by rule 70


state 108:

	expL : exp COMMA . expL 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 91
	lvalue	goto 12
	expL	goto 124
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 109:

	letblock : LET decs IN expseq END .  (reduce by rule 33)



	.	reduce by rule 33


state 110:

	tydec : TYPE ID EQ ty .  (reduce by rule 39)



	.	reduce by rule 39


state 111:

	ty : ARRAY . OF ID 

	OF	shift 125


	.	error


state 112:

	ty : LBRACE . RBRACE 
	ty : LBRACE . tyfields RBRACE 

	ID	shift 118
	RBRACE	shift 127

	tyfields	goto 126

	.	error


state 113:

	ty : ID .  (reduce by rule 40)



	.	reduce by rule 40


state 114:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 46)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 46


state 115:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 128


	.	error


state 116:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 129


	.	error


state 117:

	fundec : FUNCTION ID LPAREN RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN RPAREN . COLON ID EQ exp 

	COLON	shift 131
	EQ	shift 130


	.	error


state 118:

	tyfields : ID . COLON ID 
	tyfields : ID . COLON ID COMMA tyfields 

	COLON	shift 132


	.	error


state 119:

	forblock : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 133
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 120:

	ifblock : IF exp THEN exp ELSE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 134
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 121:

	aggregateSeq : aggregateSeq COMMA ID . EQ exp 

	EQ	shift 135


	.	error


state 122:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	aggregateSeq : ID EQ exp .  (reduce by rule 26)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 26


state 123:

	arrayinst : ID LBRACK exp RBRACK OF . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 136
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 124:

	expL : exp COMMA expL .  (reduce by rule 72)



	.	reduce by rule 72


state 125:

	ty : ARRAY OF . ID 

	ID	shift 137


	.	error


state 126:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 138


	.	error


state 127:

	ty : LBRACE RBRACE .  (reduce by rule 41)



	.	reduce by rule 41


state 128:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 139
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 129:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 141
	EQ	shift 140


	.	error


state 130:

	fundec : FUNCTION ID LPAREN RPAREN EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 142
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 131:

	fundec : FUNCTION ID LPAREN RPAREN COLON . ID EQ exp 

	ID	shift 143


	.	error


state 132:

	tyfields : ID COLON . ID 
	tyfields : ID COLON . ID COMMA tyfields 

	ID	shift 144


	.	error


state 133:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	forblock : FOR ID ASSIGN exp TO exp . DO exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	DO	shift 145


	.	error


state 134:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	ifblock : IF exp THEN exp ELSE exp .  (reduce by rule 29)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 29


state 135:

	aggregateSeq : aggregateSeq COMMA ID EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 146
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 136:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	arrayinst : ID LBRACK exp RBRACK OF exp .  (reduce by rule 28)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36


	.	reduce by rule 28


state 137:

	ty : ARRAY OF ID .  (reduce by rule 43)



	.	reduce by rule 43


state 138:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 42)



	.	reduce by rule 42


state 139:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 47)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 47


state 140:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 147
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 141:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 148


	.	error


state 142:

	fundec : FUNCTION ID LPAREN RPAREN EQ exp .  (reduce by rule 48)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 48


state 143:

	fundec : FUNCTION ID LPAREN RPAREN COLON ID . EQ exp 

	EQ	shift 149


	.	error


state 144:

	tyfields : ID COLON ID .  (reduce by rule 44)
	tyfields : ID COLON ID . COMMA tyfields 

	COMMA	shift 150


	.	reduce by rule 44


state 145:

	forblock : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 151
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 146:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	aggregateSeq : aggregateSeq COMMA ID EQ exp .  (reduce by rule 27)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 27


state 147:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 49)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 49


state 148:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 152


	.	error


state 149:

	fundec : FUNCTION ID LPAREN RPAREN COLON ID EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 153
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 150:

	tyfields : ID COLON ID COMMA . tyfields 

	ID	shift 118

	tyfields	goto 154

	.	error


state 151:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	forblock : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 32)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 32


state 152:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 155
	lvalue	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 153:

	fundec : FUNCTION ID LPAREN RPAREN COLON ID EQ exp .  (reduce by rule 50)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 50


state 154:

	tyfields : ID COLON ID COMMA tyfields .  (reduce by rule 45)



	.	reduce by rule 45


state 155:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 51)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 51


state 156:


	EOF	accept


	.	error

513 of 1077 action table entries left after compaction
531 goto table entries
