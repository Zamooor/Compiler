structure Mlex=
   struct
    structure UserDeclarations =
      struct
type pos = int
type lexresult = Tokens.token

val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos
val nesting = ref 0;
val inQuotes = ref false;
val catedString = ref "";
val stringYYpos = ref 0;
fun err(p1,p2) = ErrorMsg.error p1
fun eof() = 
(
    let 
        val pos = hd(!linePos) 
    in
        if (!nesting) <> 0 then
            ErrorMsg.error pos ("Unclosed comment") 
        else 
            print("");
        if (!inQuotes) <> false then
            ErrorMsg.error pos ("unclosed string")
        else
            print("");
    
    
        Tokens.EOF(pos,pos) 
    end
);

        
    



end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\007\007\007\007\007\007\007\007\007\007\094\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\093\007\092\007\007\007\091\007\090\089\088\087\086\085\084\082\
\\080\080\080\080\080\080\080\080\080\080\078\077\074\073\071\007\
\\007\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\070\007\069\007\007\
\\007\064\059\013\057\051\041\013\013\038\013\013\035\013\032\030\
\\013\013\013\013\022\013\019\014\013\013\013\012\009\008\007\007\
\\007"
),
 (3, 
"\095\095\095\095\095\095\095\095\095\095\094\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\098\095\095\095\095\096\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095"
),
 (5, 
"\100\100\100\100\100\100\100\100\100\100\151\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\150\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\101\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\000\000\000\011\
\\000\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\000\011\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\015\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\016\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\017\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\018\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\020\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\021\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\027\010\010\010\010\010\010\026\
\\010\010\010\010\010\010\010\010\010\023\010\000\010\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\024\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\025\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\028\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\029\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\031\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\033\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\034\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\036\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\037\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\040\010\010\010\010\010\010\010\039\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\049\
\\010\010\010\010\010\042\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\043\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\044\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\045\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\046\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\047\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\048\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\050\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\054\010\052\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\053\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\055\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\056\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\058\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\060\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\061\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\062\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\063\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\065\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\066\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\067\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\010\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\011\011\011\011\011\011\011\011\011\011\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\011\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\068\010\000\010\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\076\075\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (80, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\081\081\081\081\081\081\081\081\081\081\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (82, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\083\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (96, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\097\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (98, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (101, 
"\000\000\000\000\000\000\000\000\148\148\148\000\148\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\148\000\147\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\145\145\141\138\138\138\138\138\138\138\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\137\000\104\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\103\000\
\\000\000\000\000\102\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (104, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\136\130\129\128\127\126\125\124\123\122\121\120\119\118\117\116\
\\115\114\113\112\111\110\109\108\107\106\105\135\134\133\132\131\
\\000\130\129\128\127\126\125\124\123\122\121\120\119\118\117\116\
\\115\114\113\112\111\110\109\108\107\106\105\000\000\000\000\000\
\\000"
),
 (138, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\139\139\139\139\139\139\139\139\139\139\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (139, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\140\140\140\140\140\140\140\140\140\140\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (141, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\144\144\144\144\144\142\139\139\139\139\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (142, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\143\143\143\143\143\143\140\140\140\140\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (144, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\143\143\143\143\143\143\143\143\143\143\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (145, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\146\146\146\146\146\146\146\146\146\146\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (148, 
"\000\000\000\000\000\000\000\000\148\148\148\000\148\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\148\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\149\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 320)], trans = 0},
{fin = [(N 273),(N 320)], trans = 0},
{fin = [(N 291),(N 316),(N 320)], trans = 9},
{fin = [(N 316)], trans = 9},
{fin = [(N 316)], trans = 11},
{fin = [(N 271),(N 320)], trans = 0},
{fin = [(N 316),(N 320)], trans = 9},
{fin = [(N 316),(N 320)], trans = 14},
{fin = [(N 316)], trans = 15},
{fin = [(N 316)], trans = 16},
{fin = [(N 316)], trans = 17},
{fin = [(N 240),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 19},
{fin = [(N 316)], trans = 20},
{fin = [(N 191),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 22},
{fin = [(N 316)], trans = 23},
{fin = [(N 316)], trans = 24},
{fin = [(N 187),(N 316)], trans = 9},
{fin = [(N 230),(N 316)], trans = 9},
{fin = [(N 316)], trans = 27},
{fin = [(N 316)], trans = 28},
{fin = [(N 253),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 30},
{fin = [(N 209),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 32},
{fin = [(N 316)], trans = 33},
{fin = [(N 220),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 35},
{fin = [(N 316)], trans = 36},
{fin = [(N 224),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 38},
{fin = [(N 216),(N 316)], trans = 9},
{fin = [(N 248),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 41},
{fin = [(N 316)], trans = 42},
{fin = [(N 316)], trans = 43},
{fin = [(N 316)], trans = 44},
{fin = [(N 316)], trans = 45},
{fin = [(N 316)], trans = 46},
{fin = [(N 316)], trans = 47},
{fin = [(N 200),(N 316)], trans = 9},
{fin = [(N 316)], trans = 49},
{fin = [(N 234),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 51},
{fin = [(N 316)], trans = 52},
{fin = [(N 213),(N 316)], trans = 9},
{fin = [(N 316)], trans = 54},
{fin = [(N 316)], trans = 55},
{fin = [(N 245),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 57},
{fin = [(N 227),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 59},
{fin = [(N 316)], trans = 60},
{fin = [(N 316)], trans = 61},
{fin = [(N 316)], trans = 62},
{fin = [(N 206),(N 316)], trans = 9},
{fin = [(N 316),(N 320)], trans = 64},
{fin = [(N 316)], trans = 65},
{fin = [(N 316)], trans = 66},
{fin = [(N 316)], trans = 67},
{fin = [(N 259),(N 316)], trans = 9},
{fin = [(N 277),(N 320)], trans = 0},
{fin = [(N 275),(N 320)], trans = 0},
{fin = [(N 301),(N 320)], trans = 71},
{fin = [(N 299)], trans = 0},
{fin = [(N 293),(N 320)], trans = 0},
{fin = [(N 306),(N 320)], trans = 74},
{fin = [(N 296)], trans = 0},
{fin = [(N 304)], trans = 0},
{fin = [(N 283),(N 320)], trans = 0},
{fin = [(N 285),(N 320)], trans = 78},
{fin = [(N 309)], trans = 0},
{fin = [(N 312),(N 320)], trans = 80},
{fin = [(N 312)], trans = 80},
{fin = [(N 261),(N 320)], trans = 82},
{fin = [(N 174)], trans = 0},
{fin = [(N 269),(N 320)], trans = 0},
{fin = [(N 267),(N 320)], trans = 0},
{fin = [(N 287),(N 320)], trans = 0},
{fin = [(N 265),(N 320)], trans = 0},
{fin = [(N 263),(N 320)], trans = 0},
{fin = [(N 281),(N 320)], trans = 0},
{fin = [(N 279),(N 320)], trans = 0},
{fin = [(N 289),(N 320)], trans = 0},
{fin = [(N 3),(N 320)], trans = 0},
{fin = [(N 318),(N 320)], trans = 0},
{fin = [(N 1)], trans = 0},
{fin = [(N 182)], trans = 0},
{fin = [(N 182)], trans = 96},
{fin = [(N 177)], trans = 0},
{fin = [(N 182)], trans = 98},
{fin = [(N 180)], trans = 0},
{fin = [(N 169)], trans = 0},
{fin = [(N 165),(N 169)], trans = 101},
{fin = [(N 9)], trans = 0},
{fin = [(N 6)], trans = 0},
{fin = [], trans = 104},
{fin = [(N 135)], trans = 0},
{fin = [(N 131)], trans = 0},
{fin = [(N 127)], trans = 0},
{fin = [(N 123)], trans = 0},
{fin = [(N 119)], trans = 0},
{fin = [(N 115)], trans = 0},
{fin = [(N 111)], trans = 0},
{fin = [(N 107)], trans = 0},
{fin = [(N 103)], trans = 0},
{fin = [(N 99)], trans = 0},
{fin = [(N 95)], trans = 0},
{fin = [(N 91)], trans = 0},
{fin = [(N 87)], trans = 0},
{fin = [(N 83)], trans = 0},
{fin = [(N 79)], trans = 0},
{fin = [(N 75)], trans = 0},
{fin = [(N 71)], trans = 0},
{fin = [(N 67)], trans = 0},
{fin = [(N 63)], trans = 0},
{fin = [(N 59)], trans = 0},
{fin = [(N 55)], trans = 0},
{fin = [(N 51)], trans = 0},
{fin = [(N 47)], trans = 0},
{fin = [(N 43)], trans = 0},
{fin = [(N 39)], trans = 0},
{fin = [(N 35)], trans = 0},
{fin = [(N 151)], trans = 0},
{fin = [(N 147)], trans = 0},
{fin = [(N 143)], trans = 0},
{fin = [(N 159)], trans = 0},
{fin = [(N 139)], trans = 0},
{fin = [(N 155)], trans = 0},
{fin = [(N 31),(N 163)], trans = 0},
{fin = [], trans = 138},
{fin = [], trans = 139},
{fin = [(N 25)], trans = 0},
{fin = [], trans = 141},
{fin = [], trans = 142},
{fin = [(N 20),(N 25)], trans = 0},
{fin = [], trans = 144},
{fin = [], trans = 145},
{fin = [], trans = 144},
{fin = [(N 28)], trans = 0},
{fin = [], trans = 148},
{fin = [(N 163)], trans = 0},
{fin = [(N 167),(N 169)], trans = 0},
{fin = [(N 171)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val STRING = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => (lineNum := !lineNum+1; linePos := yypos :: !linePos; continue())
| 103 => (catedString := (!catedString) ^ "\^R"; continue())
| 107 => (catedString := (!catedString) ^ "\^S"; continue())
| 111 => (catedString := (!catedString) ^ "\^T"; continue())
| 115 => (catedString := (!catedString) ^ "\^U"; continue())
| 119 => (catedString := (!catedString) ^ "\^V"; continue())
| 123 => (catedString := (!catedString) ^ "\^W"; continue())
| 127 => (catedString := (!catedString) ^ "\^X"; continue())
| 131 => (catedString := (!catedString) ^ "\^Y"; continue())
| 135 => (catedString := (!catedString) ^ "\^Z"; continue())
| 139 => (catedString := (!catedString) ^ "\^["; continue())
| 143 => (catedString := (!catedString) ^ "\^]"; continue())
| 147 => (catedString := (!catedString) ^ "\^^"; continue())
| 151 => (catedString := (!catedString) ^ "\^_"; continue())
| 155 => (catedString := (!catedString) ^ "\^@"; continue())
| 159 => (catedString := (!catedString) ^ String.substring("\^\ ", 0, 1); continue())
| 163 => (continue())
| 165 => let val yytext=yymktext() in ErrorMsg.error yypos ("ignoring illegal excape character " ^ yytext); continue() end
| 167 => (inQuotes := false; YYBEGIN INITIAL; Tokens.STRING((!catedString), (!stringYYpos), (!stringYYpos)+size (!catedString)))
| 169 => let val yytext=yymktext() in catedString := (!catedString) ^ yytext; continue() end
| 171 => let val yytext=yymktext() in ErrorMsg.error yypos ("Expected a \" to close a string, instead found a new line" ^ yytext); lineNum := !lineNum+1; linePos := yypos :: !linePos; continue() end
| 174 => (nesting := (!nesting) + 1; YYBEGIN COMMENT; continue())
| 177 => (nesting := (!nesting) + 1; continue())
| 180 => (nesting := (!nesting) - 1; if (!nesting) = 0 then YYBEGIN INITIAL else (); continue())
| 182 => (continue())
| 187 => (Tokens.TYPE(yypos, yypos+4))
| 191 => (Tokens.VAR(yypos, yypos+3))
| 20 => let val yytext=yymktext() in catedString := (!catedString) ^ Char.toString(chr(Option.valOf(Int.fromString(String.substring(yytext, 1, size(yytext) - 1))))); continue() end
| 200 => (Tokens.FUNCTION(yypos, yypos+8))
| 206 => (Tokens.BREAK(yypos, yypos+5))
| 209 => (Tokens.OF(yypos, yypos+2))
| 213 => (Tokens.END(yypos, yypos+3))
| 216 => (Tokens.IN(yypos, yypos+2))
| 220 => (Tokens.NIL(yypos, yypos+3))
| 224 => (Tokens.LET(yypos, yypos+3))
| 227 => (Tokens.DO(yypos, yypos+2))
| 230 => (Tokens.TO(yypos, yypos+2))
| 234 => (Tokens.FOR(yypos, yypos+3))
| 240 => (Tokens.WHILE(yypos, yypos+5))
| 245 => (Tokens.ELSE(yypos, yypos+4))
| 248 => (Tokens.IF(yypos, yypos+2))
| 25 => let val yytext=yymktext() in ErrorMsg.error yypos ("ignoring illegal excape sequence " ^ yytext); continue() end
| 253 => (Tokens.THEN(yypos, yypos+4))
| 259 => (Tokens.ARRAY(yypos, yypos+5))
| 261 => (Tokens.DIVIDE(yypos, yypos+1))
| 263 => (Tokens.TIMES(yypos, yypos+1))
| 265 => (Tokens.PLUS(yypos, yypos+1))
| 267 => (Tokens.MINUS(yypos, yypos+1))
| 269 => (Tokens.DOT(yypos, yypos+1))
| 271 => (Tokens.LBRACE(yypos, yypos+1))
| 273 => (Tokens.RBRACE(yypos, yypos+1))
| 275 => (Tokens.LBRACK(yypos, yypos+1))
| 277 => (Tokens.RBRACK(yypos, yypos+1))
| 279 => (Tokens.LPAREN(yypos, yypos+1))
| 28 => (catedString := (!catedString) ^ "\""; continue())
| 281 => (Tokens.RPAREN(yypos, yypos+1))
| 283 => (Tokens.SEMICOLON(yypos, yypos+1))
| 285 => (Tokens.COLON(yypos, yypos+1))
| 287 => (Tokens.COMMA(yypos, yypos+1))
| 289 => (Tokens.AND(yypos, yypos+1))
| 291 => (Tokens.OR(yypos, yypos+1))
| 293 => (Tokens.EQ(yypos, yypos+1))
| 296 => (Tokens.NEQ(yypos, yypos+2))
| 299 => (Tokens.GE(yypos, yypos+2))
| 3 => (inQuotes := true; stringYYpos := yypos; YYBEGIN STRING; continue())
| 301 => (Tokens.GT(yypos, yypos+1))
| 304 => (Tokens.LE(yypos, yypos+2))
| 306 => (Tokens.LT(yypos, yypos+1))
| 309 => (Tokens.ASSIGN(yypos, yypos+2))
| 31 => (catedString := (!catedString) ^ "\\"; continue())
| 312 => let val yytext=yymktext() in Tokens.INT(Option.valOf (Int.fromString yytext),yypos,yypos+size yytext) end
| 316 => let val yytext=yymktext() in Tokens.ID(yytext,yypos,yypos+size yytext) end
| 318 => (continue())
| 320 => let val yytext=yymktext() in ErrorMsg.error yypos ("illegal character " ^ yytext); continue() end
| 35 => (catedString := (!catedString) ^ "\^A"; continue())
| 39 => (catedString := (!catedString) ^ "\^B"; continue())
| 43 => (catedString := (!catedString) ^ "\^C"; continue())
| 47 => (catedString := (!catedString) ^ "\^D"; continue())
| 51 => (catedString := (!catedString) ^ "\^E"; continue())
| 55 => (catedString := (!catedString) ^ "\^F"; continue())
| 59 => (catedString := (!catedString) ^ "\^G"; continue())
| 6 => (catedString := (!catedString) ^ "\n"; continue())
| 63 => (catedString := (!catedString) ^ "\^H"; continue())
| 67 => (catedString := (!catedString) ^ "\^I"; continue())
| 71 => (catedString := (!catedString) ^ "\^J"; continue())
| 75 => (catedString := (!catedString) ^ "\^K"; continue())
| 79 => (catedString := (!catedString) ^ "\^L"; continue())
| 83 => (catedString := (!catedString) ^ "\^M"; continue())
| 87 => (catedString := (!catedString) ^ "\^N"; continue())
| 9 => (catedString := (!catedString) ^ "\t"; continue())
| 91 => (catedString := (!catedString) ^ "\^O"; continue())
| 95 => (catedString := (!catedString) ^ "\^P"; continue())
| 99 => (catedString := (!catedString) ^ "\^Q"; continue())
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Unsafe.Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(Unsafe.CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(Unsafe.CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
