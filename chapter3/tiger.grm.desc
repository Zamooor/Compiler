
state 0:

	program : . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 14
	program	goto 160
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 1:

	exp : letblock .  (reduce by rule 15)



	.	reduce by rule 15


state 2:

	exp : forblock .  (reduce by rule 13)



	.	reduce by rule 13


state 3:

	exp : whileblock .  (reduce by rule 12)



	.	reduce by rule 12


state 4:

	exp : ifblock .  (reduce by rule 11)



	.	reduce by rule 11


state 5:

	exp : arrayinst .  (reduce by rule 5)



	.	reduce by rule 5


state 6:

	exp : recinst .  (reduce by rule 4)



	.	reduce by rule 4


state 7:

	exp : assign .  (reduce by rule 3)



	.	reduce by rule 3


state 8:

	exp : boolop .  (reduce by rule 19)



	.	reduce by rule 19


state 9:

	exp : comp .  (reduce by rule 18)



	.	reduce by rule 18


state 10:

	exp : arith .  (reduce by rule 17)



	.	reduce by rule 17


state 11:

	exp : funcall .  (reduce by rule 20)



	.	reduce by rule 20


state 12:

	exp : expseq .  (reduce by rule 14)



	.	reduce by rule 14


state 13:

	exp : lvalue .  (reduce by rule 1)
	lvalue : lvalue . DOT ID 
	lvalue : lvalue . LBRACK exp RBRACK 
	assign : lvalue . ASSIGN exp 

	LBRACK	shift 28
	DOT	shift 27
	ASSIGN	shift 26


	.	reduce by rule 1


state 14:

	program : exp .  (reduce by rule 0)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 0


state 15:

	exp : NIL .  (reduce by rule 6)



	.	reduce by rule 6


state 16:

	exp : BREAK .  (reduce by rule 16)



	.	reduce by rule 16


state 17:

	letblock : LET . decs IN exp END 

	FUNCTION	shift 48
	VAR	shift 47
	TYPE	shift 46

	decs	goto 45
	dec	goto 44
	tydec	goto 43
	vardec	goto 42
	fundec	goto 41

	.	error


state 18:

	forblock : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 49


	.	error


state 19:

	whileblock : WHILE . exp DO exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 50
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 20:

	ifblock : IF . exp THEN exp ELSE exp 
	ifblock : IF . exp THEN exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 51
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 21:

	arith : MINUS . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 52
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 22:

	exp : LPAREN . RPAREN 
	exp : LPAREN . exp RPAREN 
	expseq : LPAREN . exp SEMICOLON exps RPAREN 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	RPAREN	shift 54
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 53
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 23:

	exp : STRING .  (reduce by rule 9)



	.	reduce by rule 9


state 24:

	exp : INT .  (reduce by rule 8)



	.	reduce by rule 8


state 25:

	exp : ID .  (reduce by rule 2)
	lvalue : ID . DOT ID 
	lvalue : ID . LBRACK exp RBRACK 
	funcall : ID . expList 
	recinst : ID . LBRACE RBRACE 
	recinst : ID . LBRACE aggregateSeq RBRACE 
	arrayinst : ID . LBRACK exp RBRACK OF exp 

	LPAREN	shift 59
	LBRACK	shift 58
	LBRACE	shift 57
	DOT	shift 56

	expList	goto 55

	.	reduce by rule 2


state 26:

	assign : lvalue ASSIGN . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 60
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 27:

	lvalue : lvalue DOT . ID 

	ID	shift 61


	.	error


state 28:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 62
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 29:

	boolop : exp OR . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 63
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 30:

	boolop : exp AND . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 64
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 31:

	comp : exp GE . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 65
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 32:

	comp : exp GT . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 66
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 33:

	comp : exp LE . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 67
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 34:

	comp : exp LT . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 68
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 35:

	comp : exp NEQ . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 69
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 36:

	comp : exp EQ . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 70
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 37:

	arith : exp DIVIDE . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 71
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 38:

	arith : exp TIMES . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 72
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 39:

	arith : exp MINUS . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 73
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 40:

	arith : exp PLUS . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 74
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 41:

	dec : fundec .  (reduce by rule 47)



	.	reduce by rule 47


state 42:

	dec : vardec .  (reduce by rule 46)



	.	reduce by rule 46


state 43:

	dec : tydec .  (reduce by rule 45)



	.	reduce by rule 45


state 44:

	decs : dec .  (reduce by rule 43)
	decs : dec . decs 

	FUNCTION	shift 48
	VAR	shift 47
	TYPE	shift 46

	decs	goto 75
	dec	goto 44
	tydec	goto 43
	vardec	goto 42
	fundec	goto 41

	.	reduce by rule 43


state 45:

	letblock : LET decs . IN exp END 

	IN	shift 76


	.	error


state 46:

	tydec : TYPE . ID EQ ty 

	ID	shift 77


	.	error


state 47:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 78


	.	error


state 48:

	fundec : FUNCTION . ID LPAREN RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN RPAREN COLON ID EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 79


	.	error


state 49:

	forblock : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 80


	.	error


state 50:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	whileblock : WHILE exp . DO exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29
	DO	shift 81


	.	error


state 51:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	ifblock : IF exp . THEN exp ELSE exp 
	ifblock : IF exp . THEN exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29
	THEN	shift 82


	.	error


state 52:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	arith : MINUS exp .  (reduce by rule 66)
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 



	.	reduce by rule 66


state 53:

	exp : LPAREN exp . RPAREN 
	expseq : LPAREN exp . SEMICOLON exps RPAREN 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	SEMICOLON	shift 84
	RPAREN	shift 83
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	error


state 54:

	exp : LPAREN RPAREN .  (reduce by rule 7)



	.	reduce by rule 7


state 55:

	funcall : ID expList .  (reduce by rule 61)



	.	reduce by rule 61


state 56:

	lvalue : ID DOT . ID 

	ID	shift 85


	.	error


state 57:

	recinst : ID LBRACE . RBRACE 
	recinst : ID LBRACE . aggregateSeq RBRACE 

	ID	shift 88
	RBRACE	shift 87

	aggregateSeq	goto 86

	.	error


state 58:

	lvalue : ID LBRACK . exp RBRACK 
	arrayinst : ID LBRACK . exp RBRACK OF exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 89
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 59:

	expList : LPAREN . RPAREN 
	expList : LPAREN . expL RPAREN 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	RPAREN	shift 92
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 91
	lvalue	goto 13
	expseq	goto 12
	expL	goto 90
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 60:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	assign : lvalue ASSIGN exp .  (reduce by rule 25)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 25


state 61:

	lvalue : lvalue DOT ID .  (reduce by rule 22)



	.	reduce by rule 22


state 62:

	lvalue : lvalue LBRACK exp . RBRACK 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	RBRACK	shift 93
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	error


state 63:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	boolop : exp OR exp .  (reduce by rule 74)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30


	.	reduce by rule 74


state 64:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp AND exp .  (reduce by rule 73)
	boolop : exp . OR exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31


	.	reduce by rule 73


state 65:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp GE exp .  (reduce by rule 71)
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 71
	COMMA	reduce by rule 71
	SEMICOLON	reduce by rule 71
	RPAREN	reduce by rule 71
	RBRACK	reduce by rule 71
	RBRACE	reduce by rule 71
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	AND	reduce by rule 71
	OR	reduce by rule 71
	THEN	reduce by rule 71
	ELSE	reduce by rule 71
	TO	reduce by rule 71
	DO	reduce by rule 71
	IN	reduce by rule 71
	END	reduce by rule 71
	FUNCTION	reduce by rule 71
	VAR	reduce by rule 71
	TYPE	reduce by rule 71


	.	error


state 66:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp GT exp .  (reduce by rule 69)
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 69
	COMMA	reduce by rule 69
	SEMICOLON	reduce by rule 69
	RPAREN	reduce by rule 69
	RBRACK	reduce by rule 69
	RBRACE	reduce by rule 69
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	AND	reduce by rule 69
	OR	reduce by rule 69
	THEN	reduce by rule 69
	ELSE	reduce by rule 69
	TO	reduce by rule 69
	DO	reduce by rule 69
	IN	reduce by rule 69
	END	reduce by rule 69
	FUNCTION	reduce by rule 69
	VAR	reduce by rule 69
	TYPE	reduce by rule 69


	.	error


state 67:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	comp : exp LE exp .  (reduce by rule 72)
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 72
	COMMA	reduce by rule 72
	SEMICOLON	reduce by rule 72
	RPAREN	reduce by rule 72
	RBRACK	reduce by rule 72
	RBRACE	reduce by rule 72
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	AND	reduce by rule 72
	OR	reduce by rule 72
	THEN	reduce by rule 72
	ELSE	reduce by rule 72
	TO	reduce by rule 72
	DO	reduce by rule 72
	IN	reduce by rule 72
	END	reduce by rule 72
	FUNCTION	reduce by rule 72
	VAR	reduce by rule 72
	TYPE	reduce by rule 72


	.	error


state 68:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp LT exp .  (reduce by rule 70)
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 70
	COMMA	reduce by rule 70
	SEMICOLON	reduce by rule 70
	RPAREN	reduce by rule 70
	RBRACK	reduce by rule 70
	RBRACE	reduce by rule 70
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	AND	reduce by rule 70
	OR	reduce by rule 70
	THEN	reduce by rule 70
	ELSE	reduce by rule 70
	TO	reduce by rule 70
	DO	reduce by rule 70
	IN	reduce by rule 70
	END	reduce by rule 70
	FUNCTION	reduce by rule 70
	VAR	reduce by rule 70
	TYPE	reduce by rule 70


	.	error


state 69:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp NEQ exp .  (reduce by rule 68)
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 68
	COMMA	reduce by rule 68
	SEMICOLON	reduce by rule 68
	RPAREN	reduce by rule 68
	RBRACK	reduce by rule 68
	RBRACE	reduce by rule 68
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	AND	reduce by rule 68
	OR	reduce by rule 68
	THEN	reduce by rule 68
	ELSE	reduce by rule 68
	TO	reduce by rule 68
	DO	reduce by rule 68
	IN	reduce by rule 68
	END	reduce by rule 68
	FUNCTION	reduce by rule 68
	VAR	reduce by rule 68
	TYPE	reduce by rule 68


	.	error


state 70:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp EQ exp .  (reduce by rule 67)
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	EOF	reduce by rule 67
	COMMA	reduce by rule 67
	SEMICOLON	reduce by rule 67
	RPAREN	reduce by rule 67
	RBRACK	reduce by rule 67
	RBRACE	reduce by rule 67
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	AND	reduce by rule 67
	OR	reduce by rule 67
	THEN	reduce by rule 67
	ELSE	reduce by rule 67
	TO	reduce by rule 67
	DO	reduce by rule 67
	IN	reduce by rule 67
	END	reduce by rule 67
	FUNCTION	reduce by rule 67
	VAR	reduce by rule 67
	TYPE	reduce by rule 67


	.	error


state 71:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	arith : exp DIVIDE exp .  (reduce by rule 65)
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 



	.	reduce by rule 65


state 72:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp TIMES exp .  (reduce by rule 64)
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 



	.	reduce by rule 64


state 73:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp MINUS exp .  (reduce by rule 63)
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	TIMES	shift 38
	DIVIDE	shift 37


	.	reduce by rule 63


state 74:

	arith : exp . PLUS exp 
	arith : exp PLUS exp .  (reduce by rule 62)
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	TIMES	shift 38
	DIVIDE	shift 37


	.	reduce by rule 62


state 75:

	decs : dec decs .  (reduce by rule 44)



	.	reduce by rule 44


state 76:

	letblock : LET decs IN . exp END 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 94
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 77:

	tydec : TYPE ID . EQ ty 

	EQ	shift 95


	.	error


state 78:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 97
	ASSIGN	shift 96


	.	error


state 79:

	fundec : FUNCTION ID . LPAREN RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN RPAREN COLON ID EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 98


	.	error


state 80:

	forblock : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 99
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 81:

	whileblock : WHILE exp DO . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 100
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 82:

	ifblock : IF exp THEN . exp ELSE exp 
	ifblock : IF exp THEN . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 101
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 83:

	exp : LPAREN exp RPAREN .  (reduce by rule 10)



	.	reduce by rule 10


state 84:

	expseq : LPAREN exp SEMICOLON . exps RPAREN 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 103
	lvalue	goto 13
	expseq	goto 12
	exps	goto 102
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 85:

	lvalue : ID DOT ID .  (reduce by rule 21)



	.	reduce by rule 21


state 86:

	recinst : ID LBRACE aggregateSeq . RBRACE 
	aggregateSeq : aggregateSeq . COMMA ID EQ exp 

	COMMA	shift 105
	RBRACE	shift 104


	.	error


state 87:

	recinst : ID LBRACE RBRACE .  (reduce by rule 26)



	.	reduce by rule 26


state 88:

	aggregateSeq : ID . EQ exp 

	EQ	shift 106


	.	error


state 89:

	lvalue : ID LBRACK exp . RBRACK 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	arrayinst : ID LBRACK exp . RBRACK OF exp 

	RBRACK	shift 107
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	error


state 90:

	expList : LPAREN expL . RPAREN 

	RPAREN	shift 108


	.	error


state 91:

	expL : exp .  (reduce by rule 41)
	expL : exp . COMMA expL 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	COMMA	shift 109
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 41


state 92:

	expList : LPAREN RPAREN .  (reduce by rule 39)



	.	reduce by rule 39


state 93:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 24)



	.	reduce by rule 24


state 94:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	letblock : LET decs IN exp . END 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29
	END	shift 110


	.	error


state 95:

	tydec : TYPE ID EQ . ty 

	ID	shift 114
	LBRACE	shift 113
	ARRAY	shift 112

	ty	goto 111

	.	error


state 96:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 115
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 97:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 116


	.	error


state 98:

	fundec : FUNCTION ID LPAREN . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . RPAREN COLON ID EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 119
	RPAREN	shift 118

	tyfields	goto 117

	.	error


state 99:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	forblock : FOR ID ASSIGN exp . TO exp DO exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29
	TO	shift 120


	.	error


state 100:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	whileblock : WHILE exp DO exp .  (reduce by rule 33)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 33


state 101:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	ifblock : IF exp THEN exp . ELSE exp 
	ifblock : IF exp THEN exp .  (reduce by rule 32)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29
	ELSE	shift 121


	.	reduce by rule 32


state 102:

	expseq : LPAREN exp SEMICOLON exps . RPAREN 

	RPAREN	shift 122


	.	error


state 103:

	exps : exp .  (reduce by rule 37)
	exps : exp . SEMICOLON exps 
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	SEMICOLON	shift 123
	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 37


state 104:

	recinst : ID LBRACE aggregateSeq RBRACE .  (reduce by rule 27)



	.	reduce by rule 27


state 105:

	aggregateSeq : aggregateSeq COMMA . ID EQ exp 

	ID	shift 124


	.	error


state 106:

	aggregateSeq : ID EQ . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 125
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 107:

	lvalue : ID LBRACK exp RBRACK .  (reduce by rule 23)
	arrayinst : ID LBRACK exp RBRACK . OF exp 

	OF	shift 126


	.	reduce by rule 23


state 108:

	expList : LPAREN expL RPAREN .  (reduce by rule 40)



	.	reduce by rule 40


state 109:

	expL : exp COMMA . expL 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 91
	lvalue	goto 13
	expseq	goto 12
	expL	goto 127
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 110:

	letblock : LET decs IN exp END .  (reduce by rule 35)



	.	reduce by rule 35


state 111:

	tydec : TYPE ID EQ ty .  (reduce by rule 48)



	.	reduce by rule 48


state 112:

	ty : ARRAY . OF ID 

	OF	shift 128


	.	error


state 113:

	ty : LBRACE . RBRACE 
	ty : LBRACE . tyfields RBRACE 

	ID	shift 119
	RBRACE	shift 130

	tyfields	goto 129

	.	error


state 114:

	ty : ID .  (reduce by rule 49)



	.	reduce by rule 49


state 115:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 55)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 55


state 116:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 131


	.	error


state 117:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 132


	.	error


state 118:

	fundec : FUNCTION ID LPAREN RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN RPAREN . COLON ID EQ exp 

	COLON	shift 134
	EQ	shift 133


	.	error


state 119:

	tyfields : ID . COLON ID 
	tyfields : ID . COLON ID COMMA tyfields 

	COLON	shift 135


	.	error


state 120:

	forblock : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 136
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 121:

	ifblock : IF exp THEN exp ELSE . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 137
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 122:

	expseq : LPAREN exp SEMICOLON exps RPAREN .  (reduce by rule 36)



	.	reduce by rule 36


state 123:

	exps : exp SEMICOLON . exps 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 103
	lvalue	goto 13
	expseq	goto 12
	exps	goto 138
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 124:

	aggregateSeq : aggregateSeq COMMA ID . EQ exp 

	EQ	shift 139


	.	error


state 125:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	aggregateSeq : ID EQ exp .  (reduce by rule 28)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 28


state 126:

	arrayinst : ID LBRACK exp RBRACK OF . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 140
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 127:

	expL : exp COMMA expL .  (reduce by rule 42)



	.	reduce by rule 42


state 128:

	ty : ARRAY OF . ID 

	ID	shift 141


	.	error


state 129:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 142


	.	error


state 130:

	ty : LBRACE RBRACE .  (reduce by rule 50)



	.	reduce by rule 50


state 131:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 143
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 132:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 145
	EQ	shift 144


	.	error


state 133:

	fundec : FUNCTION ID LPAREN RPAREN EQ . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 146
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 134:

	fundec : FUNCTION ID LPAREN RPAREN COLON . ID EQ exp 

	ID	shift 147


	.	error


state 135:

	tyfields : ID COLON . ID 
	tyfields : ID COLON . ID COMMA tyfields 

	ID	shift 148


	.	error


state 136:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	forblock : FOR ID ASSIGN exp TO exp . DO exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29
	DO	shift 149


	.	error


state 137:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	ifblock : IF exp THEN exp ELSE exp .  (reduce by rule 31)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 31


state 138:

	exps : exp SEMICOLON exps .  (reduce by rule 38)



	.	reduce by rule 38


state 139:

	aggregateSeq : aggregateSeq COMMA ID EQ . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 150
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 140:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	arrayinst : ID LBRACK exp RBRACK OF exp .  (reduce by rule 30)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37


	.	reduce by rule 30


state 141:

	ty : ARRAY OF ID .  (reduce by rule 52)



	.	reduce by rule 52


state 142:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 51)



	.	reduce by rule 51


state 143:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 56)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 56


state 144:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 151
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 145:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 152


	.	error


state 146:

	fundec : FUNCTION ID LPAREN RPAREN EQ exp .  (reduce by rule 57)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 57


state 147:

	fundec : FUNCTION ID LPAREN RPAREN COLON ID . EQ exp 

	EQ	shift 153


	.	error


state 148:

	tyfields : ID COLON ID .  (reduce by rule 53)
	tyfields : ID COLON ID . COMMA tyfields 

	COMMA	shift 154


	.	reduce by rule 53


state 149:

	forblock : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 155
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 150:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	aggregateSeq : aggregateSeq COMMA ID EQ exp .  (reduce by rule 29)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 29


state 151:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 58)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 58


state 152:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 156


	.	error


state 153:

	fundec : FUNCTION ID LPAREN RPAREN COLON ID EQ . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 157
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 154:

	tyfields : ID COLON ID COMMA . tyfields 

	ID	shift 119

	tyfields	goto 158

	.	error


state 155:

	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 
	forblock : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 34)

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 34


state 156:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 25
	INT	shift 24
	STRING	shift 23
	LPAREN	shift 22
	MINUS	shift 21
	IF	shift 20
	WHILE	shift 19
	FOR	shift 18
	LET	shift 17
	BREAK	shift 16
	NIL	shift 15

	exp	goto 159
	lvalue	goto 13
	expseq	goto 12
	funcall	goto 11
	arith	goto 10
	comp	goto 9
	boolop	goto 8
	assign	goto 7
	recinst	goto 6
	arrayinst	goto 5
	ifblock	goto 4
	whileblock	goto 3
	forblock	goto 2
	letblock	goto 1

	.	error


state 157:

	fundec : FUNCTION ID LPAREN RPAREN COLON ID EQ exp .  (reduce by rule 59)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 59


state 158:

	tyfields : ID COLON ID COMMA tyfields .  (reduce by rule 54)



	.	reduce by rule 54


state 159:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 60)
	arith : exp . PLUS exp 
	arith : exp . MINUS exp 
	arith : exp . TIMES exp 
	arith : exp . DIVIDE exp 
	comp : exp . EQ exp 
	comp : exp . NEQ exp 
	comp : exp . GT exp 
	comp : exp . LT exp 
	comp : exp . GE exp 
	comp : exp . LE exp 
	boolop : exp . AND exp 
	boolop : exp . OR exp 

	PLUS	shift 40
	MINUS	shift 39
	TIMES	shift 38
	DIVIDE	shift 37
	EQ	shift 36
	NEQ	shift 35
	LT	shift 34
	LE	shift 33
	GT	shift 32
	GE	shift 31
	AND	shift 30
	OR	shift 29


	.	reduce by rule 60


state 160:


	EOF	accept


	.	error

551 of 1119 action table entries left after compaction
581 goto table entries
